# (4) A globe
lat <- matrix(seq(90, -90, len = 50)*pi/180, 50, 50, byrow = TRUE)
long <- matrix(seq(-180, 180, len = 50)*pi/180, 50, 50)
r <- 6378.1 # radius of Earth in km
x <- r*cos(lat)*cos(long)
y <- r*cos(lat)*sin(long)
z <- r*sin(lat)
open3d()
persp3d(x, y, z, col = "white",
texture = system.file("textures/worldsmall.png", package = "rgl"),
specular = "black", axes = FALSE, box = FALSE, xlab = "", ylab = "", zlab = "",
normal_x = x, normal_y = y, normal_z = z)
if (!rgl.useNULL())
play3d(spin3d(axis = c(0, 0, 1), rpm = 16), duration = 2.5)
## Not run:
# This looks much better, but is slow because the texture is very big
persp3d(x, y, z, col = "white",
texture = system.file("textures/world.png", package = "rgl"),
specular = "black", axes = FALSE, box = FALSE, xlab = "", ylab = "", zlab = "",
normal_x = x, normal_y = y, normal_z = z)
## End(Not run)
x <- seq(-10, 10, length = 30)
y <- x
f <- function(x, y) { r <- sqrt(x^2 + y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
open3d()
bg3d("white")
material3d(col = "black")
persp3d(x, y, z, aspect = c(1, 1, 0.5), col = "lightblue",
xlab = "X", ylab = "Y", zlab = "Sinc( r )")
open3d
open3d()
persp3d(x,y,z)
z
?outer
xE <- c(-10, 10); xy <- expand.grid(xE, xE)
points3d(xy[, 1], xy[, 2], 6, col = "red")
lines3d(x, y = 10, z = 6 + sin(x), col = "green")
phi <- seq(0, 2*pi, len = 201)
r1 <- 7.725 # radius of 2nd maximum
xr <- r1 * cos(phi)
yr <- r1 * sin(phi)
lines3d(xr, yr, f(xr, yr), col = "pink", lwd = 2)
# (3) Visualizing a simple DEM model
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
open3d()
bg3d("slategray")
material3d(col = "black")
persp3d(x, y, z, col = "green3", aspect = "iso",
axes = FALSE, box = FALSE)
# (4) A globe
# (4) A globe
lat <- matrix(seq(90, -90, len = 50)*pi/180, 50, 50, byrow = TRUE)
long <- matrix(seq(-180, 180, len = 50)*pi/180, 50, 50)
r <- 6378.1 # radius of Earth in km
x <- r*cos(lat)*cos(long)
y <- r*cos(lat)*sin(long)
z <- r*sin(lat)
open3d()
persp3d(x, y, z, col = "white",
texture = system.file("textures/worldsmall.png", package = "rgl"),
specular = "black", axes = FALSE, box = FALSE, xlab = "", ylab = "", zlab = "",
normal_x = x, normal_y = y, normal_z = z)
dnorm(-10,10)
dnorm(-10:10)
x<-dnorm(-10:10)
y=x
z=x
persp3d(x,y,z)
open3d()
persp3d(x,y,z)
persp3d(x,y,x*y)
f<-function(x,y){x^2+y^2}
z<-outer(x,y,f)
open3d
open3d()
persp3d(x,y,z)
x<-seq(-10:10)
y=x
f<-function(x,y){dnorm(x+y)}
z=outer(x,y,f)
open3d
persp3d(x,y,z)
persp3d(x,y,z,aspect=c(1,1,0.5))
persp3d(x,y,z,aspect=c(1,1,0.5),col="lightblue")
x<-seq(-2,2,by=0.1)
head(x)
y<-x
z=outer(x,y,f)
persp3d(x,y,z,aspect=c(1,1,0.5),col="lightblue")
persp3d(x,y,z,aspect=c(2,1,1),col="lightblue")
persp3d(x,y,z,aspect=c(2,2,2),col="lightblue")
f<-function(x,y){dnorm(x)+dnorm(y)}
z=outer(x,y,f)
persp3d(x,y,z,aspect=c(2,2,2),col="lightblue")
persp3d(x,y,z,aspect=c(2,2,2),col="lightblue",xlim=c(-10:10))
persp3d(x,y,z,aspect=c(2,2,2),col="lightblue",xlim=c(-3:3)
)
persp3d(x,y,z,aspect=c(2,2,2),col="lightblue")
x<-seq(-4,4,by=0.1)
y<-x
z=outer(x,y,f)
persp3d(x,y,z,aspect=c(2,2,2),col="lightblue")
f<-function(x,y){dnorm(x)dnorm(y)}
f<-function(x,y){dnorm(x)*dnorm(y)}
z=outer(x,y,f)
persp3d(x,y,z,aspect=c(2,2,2),col="lightblue")
?mvrnorm
mvrnorm(10)
mvrnorm(10,0)
mvrnorm(10,0,1)
plot(mvrnorm(10,0,1))
plot(seq(-2,2),mvrnorm(10,0,1))
plot(seq(-5,5),mvrnorm(10,0,1))
plot(seq(-4,5),mvrnorm(10,0,1))
plot(seq(-4,5),mvrnorm(10,0,1))
open3d()
persp3d(x, y, z, aspect = c(1, 1, 0.5), col = "lightblue",
xlab = "X", ylab = "Y", zlab = "Sinc( r )")
persp3d(x, y, z, col = "green3", aspect = "iso",
axes = FALSE, box = FALSE)
lat <- matrix(seq(90, -90, len = 50)*pi/180, 50, 50, byrow = TRUE)
long <- matrix(seq(-180, 180, len = 50)*pi/180, 50, 50)
r <- 6378.1 # radius of Earth in km
x <- r*cos(lat)*cos(long)
y <- r*cos(lat)*sin(long)
z <- r*sin(lat)
persp3d(x, y, z, col = "white",
texture = system.file("textures/worldsmall.png", package = "rgl"),
specular = "black", axes = FALSE, box = FALSE, xlab = "", ylab = "", zlab = "",
normal_x = x, normal_y = y, normal_z = z)
x <- y <- seq(-5, 5, len = 200)
x
X <- expand.grid(x = x, y = y)
View(X)
X <- transform(X, z = dnorm(x, -2.5)*dnorm(y) - dnorm(x, 2.5)*dnorm(y))
z <- matrix(X$z, nrow = 200)
persp(x, y, z, col = "lightgoldenrod", border = NA,
theta = 30, phi = 15, ticktype = "detailed",
ltheta = -120, shade = 0.25)
?transform
View(X)
persp(x, y, z, col = "lightgoldenrod", border = NA,
theta = 30, phi = 15, ticktype = "detailed",
ltheta = -120, shade = 0.25)
persp3d(x,y,z)
persp3d(x,y,z,col="lightgoldenrod")
persp(x,y,z,col="lightgoldenrod")
persp(x,y,z,col="lightgoldenrod",theta=90)
persp(x,y,z,col="lightgoldenrod",theta=30)
persp(x,y,z,col="lightgoldenrod",theta=30,phi=15)
persp(x,y,z,col="lightgoldenrod",theta=30,phi=15,shade=0.25)
persp(x,y,z,col="lightgoldenrod",theta=30,phi=15,shade=0.25,border=NA)
persp(x,y,z,col="lightgoldenrod",theta=30,shade=0.25,border=NA)
persp(x,y,z,col="lightgoldenrod",theta=90,shade=0.25,border=NA)
persp(x,y,z,col="lightgoldenrod",theta=0,shade=0.25,border=NA)
persp(x,y,z,col="lightgoldenrod",theta=90,shade=0.25,border=NA)
persp(x,y,z,col="lightgoldenrod",theta=90,phi=90,shade=0.25,border=NA)
persp(x,y,z,col="lightgoldenrod",theta=90,phi=90,shade=0.25,border=NA)
?mvrnorm
sigma<-matrix(c(0,1),c(1,0))
sigma
sigma<-matrix(c(0,1);c(1,0))
sigma<-matrix(c(c(0,1),c(1,0)))
sigma
sigma<-matrix(c(0,1,0,1),2,2)
sigma
sigma<-matrix(c(0,0,1,1),2,2)
sigma
sigma<-matrix(c(0,1,1,0),2,2)
sigma
mvrnor(10,1,sigma)
mvrnorm(10,1,sigma)
mvrnorm(10,c(0,0),sigma)
sigma
T(sigma)
sigma.T
sigma<-matrix(c(1,0,1,0),2,2)
sigma
sigma<-matrix(c(1,0,1,0),2,2,byrow=TRUE)
sigma
sigma<-matrix(c(1,0,0,1),2,2,byrow=TRUE)
sigma
mvrnorm(10,c(0,0),sigma)
LoadLibraries()
mvrnorm(10,c(0,0),sigma)
s<-mvrnorm(10,c(0,0),sigma)
s
plot(seq(-1,1,by=0.1),s[,1])
plot(seq(-1,1,length=10),s[,1])
plot(seq(-1,1,length=10),s[,1],type="L")
plot(seq(-1,1,length=10),s[,1],type="l")
plot(seq(-1,1,length=10),s[,1])
plot(s[,1],s[2])
plot(s[,1],s[,2])
persp3d(s[,1],s[,2])
library(rgl)
persp3d(s[,1],s[,2])
?mvrnorm
?mvrnorm
sigma
sigma<-matrix(c(1,0,0,1),2,2,byrow=TRUE)
sigma
s
s1<-s[,1]
s2<-s[,2]
mean
mean(s1)
mean(s2)
cov(s1,s2)
?cov
cor(s1,s2)
cov(s1,s2)
sigma<-matrix(c(1,2,2,1),2,2,byrow=TRUE)
sigma
s<-mvrnorm(10,c(0,0),sigma)
sigma<-matrix(c(10,2,2,10),2,2,byrow=TRUE)
sigma
s<-mvrnorm(10,c(0,0),sigma)
s
s1<-s[,1]
s2<-s[,2]
mean(s1)
mean(s2)
?mvrnorm
s<-mvrnorm(1000,c(0,0),sigma)
s1<-s[,1]
s2<-s[,2]
mean(s1)
mean(s2)
cov(s1,s2)
var(s1,s2)
cov(s)
s<-mvrnorm(10000,c(0,0),sigma)
cov(s)
mean(s1)
mean(s2)
s1<-s[,1]
s2<-s[,2]
mean(s1)
mean(s2)
cov(s)
sigma<-matrix(c(10,2,2,10,10,2,2,10),2,2,byrow=TRUE)
sigma
sigma<-matrix(c(10,2,2,10,10,2,2,10),c(4,4),byrow=TRUE)
sigma
s<-mvrnorm(10000,rep(0,4),sigma)
sigma<-matrix(rep(c(10,2,2,10),4),c(4,4),byrow=TRUE)
sigma
s<-mvrnorm(10000,rep(0,4),sigma)
sigma<-matrix(rep(c(10,5,2,10),4),c(4,4),byrow=TRUE)
sigma
s<-mvrnorm(10000,rep(0,4),sigma)
sigma<-matrix(rep(c(10,5,7,10),4),c(4,4),byrow=TRUE)
sigma
s<-mvrnorm(10000,rep(0,4),sigma)
sigma
sigma<-matrix(rep(c(10,5,7,3),c(3,3),byrow=TRUE)
sigma
sigma<-matrix(rep(c(10,5,7,3),c(3,3),byrow=TRUE)
sigma<-matrix(rep(c(10,5,7),3),c(3,3),byrow=TRUE)
sigma<-matrix(rep(c(10,5,7),3),c(3,3),byrow=TRUE)
sigma
s<-mvrnorm(10000,rep(0,3),sigma)
knn.pred=knn(ds.train.data, ds.test.data, ds.train.class,k=10)
library(class)
knn.pred=knn(ds.train.data, ds.test.data, ds.train.class,k=10)
install.packages("e1071")
set.seed(1)
x=matrix(rnorm(20*2),ncol=2)
x
y=c(rep(-1,10), rep(1,10))
y
x[y==1,]
y
dim(x)
x[y==1,]
x[y==1,]=x[y==1,]+1
x
plot(x)
plot(x,col=(3-y))
?col
plot(x,col=(3-y))
plot(x)
plot(x,col=(3-y))
plot(x,col="blue")
plot(x,col=1)
plot(x,col=2)
plot(x,col=2)
plot(x,col=3)
plot(x,col=3)
plot(x,col=3-y)
plot(x,col=4)
plot(x,col=3-y)
dat = data.frame(x=x, y=as.factor(y))
dat
View(dat)
scale=FALSE)
svmfit = svm(y~., data = dat
kernel="linear",
svmfit = svm(y~., data = dat,
kernel="linear",
cost=10,
scale=FALSE)
library(e1071)
svmfit = svm(y~., data = dat,
kernel="linear",
cost=10,
scale=FALSE)
plot(svmfit,dat)
?svm
svmfit = svm(y~., data = dat,
kernel="radial",
cost=10,
scale=FALSE)
plot(svmfit,dat)
plot(x,col=3-y)
plot(svmfit,dat)
kernel="sigmoid",
svmfit = svm(y~., data = dat,
kernel="sigmoid",
cost=10,
scale=FALSE)
plot(svmfit,dat)
svmfit = svm(y~., data = dat,
kernel="linear",
cost=10,
scale=FALSE)
plot(svmfit,dat)
svmfit$index
summary(svmfit)
set.seed(1)
tune.out=tune(svm,y~., data=dat, kernel="linear",
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
set.seed(1)
tune.out=tune(svm,y~., data=dat, kernel="linear",
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(tune.out)
bestmod=tune.out$best.model
summary(bestmod)
xtest=matrix(rnorm(20*2),ncol=2);
ytest= sample(c(-1,1),20,rep=TRUE)
xtest[ytest==1,]=xtest[ytest==1,]+1
testdata=data.frame(x=xtest, y = as.factor(ytest))
ypred=predict(bestmod, testdat)
testdat=data.frame(x=xtest, y = as.factor(ytest))
ypred=predict(bestmod, testdat)
table(predict==ypred,truth=testdat$y)
table(predict=ypred,truth=testdat$y)
svmfit= svm(y~.,data=dat, kernel="linear",
cost=0.01, scale=FALSE)
ypred=predict(svmfit, testdat)
table(predict=ypred, truth=testdat$y)
x[y==1,] = x[y==1,] + 0.5
plot(x,col=(y+5)/2, pcd=19)
x[y==1,] = x[y==1,] + 0.5
warnings()
plot(x,col=(y+5)/2, pch=19)
dat = data.frame(x=x, y= as.factors(y))
dat = data.frame(x=x, y= as.factor(y))
svmfit=svm(y~., data=dat, kernel="linear",cost=1e5)
summary(svmfit)
plot(svmfit,dat)
libsvm
?e1071::svm
set.seed(1)
set.seed(1)
x=matrix(rnorm(200*2),ncol=2)
x[1:100,] = x[1:100,]+2
x[101:150,] = x[101:150,]-2
y = c(rep(1,150),rep(2,50))
data = data.frame(x=x, y = as.factor(y))
View(x)
plot(x)
plot(x,col=y)
x=matrix(rnorm(200*2),ncol=2)
plot(x,col=y)
x=matrix(rnorm(200*2),ncol=2)
x[1:100,] = x[1:100,]+2
plot(x,col=y)
x=matrix(rnorm(200*2),ncol=2)
plot(x,col=y)
x[1:100,] = x[1:100,]+2
plot(x,col=y)
x[101:150,] = x[101:150,]-2
plot(x,col=y)
train=sample(200,100)
View(train)
train=sample(200,100)
svmfit=svm(y~.,data=dat[train,],kernel="radial"),
svmfit=svm(y~.,data=dat[train,],kernel="radial",
gamma=1,cost=1)
plot(svmfit,dat[train,])
pmfrow(2,2)
parmfrow(2,2)
install.packages("rjson")
library(rjson)
json_data <- fromJSON(file='/home/rishiraj/kaggle/train.json')
View(json_data)
dim(json_data)
class(json_data)
json_data[0]
json_data[0][0]
json_data[0][0][0]
json_data[0][0][0][0]
?fromJSON
json_data[0]$'id'
json_data$id
json_data[0]$id
fromJSON( '{"a":true, "b":false, "c":null}' )
a<-fromJSON( '{"a":true, "b":false, "c":null}' )
a
dat<-fromJSON( '{"a":true, "b":false, "c":null}' )
dat$a
dat<-fromJSON( '[{"a":true, "b":false, "c":null}]' )
dat
dat$a
dat[0]$a
len(dat)
dat.shape
dim(dat)
type(data)
type(dat)
clas(dat)
class(dat)
dat[1]
dat[1]$a
dat[1]
dat[2]
d<-dat[1]
d
d$a
d[1]
fromJSON( '{"a":true, "b":false, "c":null}' )
dat<-fromJSON( '{"a":true, "b":false, "c":null}' )
dat
clas(dat)
class(dat)
dat[0]
dat[1]
dat[2]
dat<-fromJSON( '[{"a":true, "b":false, "c":null},{"a":true, "b":false, "c":null}]' )
dat
class(dat)
dat[1]
dat[2]
dat[3]
dim(dat)
dat.length()
length(dat)
length(json_data)
json_data[1]
json_data[1]$id
json_data[1][1]
d<-json_data[1]
d
d$id
d[1]
dat
dat[1]
fromJSON( '{"a":true, "b":false, "c":null}' ,method="R")
fromJSON( '{"a":true, "b":false, "c":null}')
json_data <- fromJSON(file='/home/rishiraj/kaggle/train.json',method="R")
json_data <- fromJSON(file='/home/rishiraj/kaggle/train.json')
json_data <- fromJSON(file='/home/rishiraj/kaggle/train.json')
head(json_data)
View(head(json_data))
data <- fromJSON(file='/home/rishiraj/kaggle/train.json')
data[1]
data[1,1]
data[[1]]
data[[1]][1]
data[[1]][2]
require(clusterGeneration)
require(cluster)
require(MASS)
?cluster
cluster::
?MASS
class::knn
?class::knn
require(class)
rm(list=ls())
ls()
q("yes")
require(MASS);
setwd('/home/rishiraj/cs5011/contest/ml_contest');
data = read.csv('../train_X.csv', header=FALSE);
target = read.csv('../train_Y.csv', header=FALSE);
runif
?runif
runif(0.2, 1, 10)
runif(1, 1, 10)
runif(1, 1, 10)
runif(1, 1, 10)
a = [1,2,3,4]
a = c(1,3,4,5)
a
runif(1, a-mean(a))
runif(1, a, a-mean(a))
a
mean(a)
a-mean(a)
mapply(a, mean(a))
mapply(a, mean
)
runif(10, 1, 10)
runif(10, 10, 1)
runif(10, 10, 1)
